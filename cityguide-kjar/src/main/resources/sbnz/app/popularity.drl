package sbnz.app;

import sbnz.app.model.Location;
import sbnz.app.model.Rating;
import sbnz.app.model.RatingType;
import java.util.List;

declare enum PopularityType
   POPULAR, UNPOPULAR, INDETERMINABLE;
end

declare Popularity
	locationId: long
	type: PopularityType
end

query hasPercentageOfPositiveRatingsInRange(long $locationId, int $minPercentage, int $maxPercentage)
	$l : Location(id == $locationId)
	$ratings : List(size > 0) from collect(Rating(location.id == $l.id))
	Number(intValue / $ratings.size * 100 >= $minPercentage, intValue / $ratings.size * 100 <= $maxPercentage)
	from accumulate(Rating($rating:this, type == RatingType.LIKE) from $ratings, count($rating))
end

rule "location popular if it has more than 80% of positive ratings"
	when
		$l : Location($locationId : id)
		not Popularity(locationId == $locationId)
		hasPercentageOfPositiveRatingsInRange($locationId, 80, 100;)
	then
		System.out.println("Location is popular");
		insert(new Popularity($locationId, PopularityType.POPULAR));
end

rule "location unpopular if it has less than 20% of positive ratings"
	when
		$l : Location($locationId : id)
		not Popularity(locationId == $locationId)
		hasPercentageOfPositiveRatingsInRange($locationId, 0, 20;)
	then
		System.out.println("Location is unpopular");
		insert(new Popularity($locationId, PopularityType.UNPOPULAR));
end

rule "location popular if it has more than 70% of positive ratings and rating count above average"
	when
		$l : Location($locationId : id)
		not Popularity(locationId == $locationId)
		$avgRatings : Number() from accumulate(
								Location($id : id) and
								$ratings : List() from collect (Rating(location.id == $id)),
								average($ratings.size())
							)
		List(size > $avgRatings.intValue()) from collect(Rating(location.id == $locationId))
		hasPercentageOfPositiveRatingsInRange($locationId, 70, 100;)
	then
		System.out.println("Location is popular");
		insert(new Popularity($locationId, PopularityType.POPULAR));
end

rule "location unpopular if it has less than 30% of positive ratings and rating count above average"
	when
		$l : Location($locationId : id)
		not Popularity(locationId == $locationId)
		$avgRatings : Number() from accumulate(
								Location($id : id) and
								$ratings : List() from collect (Rating(location.id == $id)),
								average($ratings.size())
							)
		List(size > $avgRatings.intValue()) from collect(Rating(location.id == $locationId))
		hasPercentageOfPositiveRatingsInRange($locationId, 0, 30;)
	then
		System.out.println("Location is unpopular");
		insert(new Popularity($locationId, PopularityType.UNPOPULAR));
end

rule "location's popularity is indeterminable if it has no ratings"
	when
		$l : Location($locationId : id)
		not Popularity(locationId == $locationId)
		not Rating(location.id == $locationId)
	then
		System.out.println("Location's popularity is indeterminable");
		insert(new Popularity($locationId, PopularityType.INDETERMINABLE));
end

rule "location's popularity is indeterminable if no other rule has been activated"
salience -1
	when
		$l : Location($locationId : id)
		not Popularity(locationId == $locationId)
	then
		System.out.println("Location's popularity is indeterminable");
		insert(new Popularity($locationId, PopularityType.INDETERMINABLE));
end