package sbnz.app;

import sbnz.app.model.*;
import sbnz.app.fact.*;
import java.util.Map;

declare SelectedLocation
	locationId : long
	time : double
end

global Map<Location, Double> recommendedLocations;

rule "Ranking locations"
agenda-group "ranking-locations"
salience $typeScore * ($scoreByPopularity + $scoreByPreviousExperience) * 100
	when
		TripPlanRequest($requestId : user.id, $days : tripDurationInDays)
		$l : Location($locationId : id, $typeId : type.id)
		not SelectedLocation(locationId == $locationId)
		LocationTypeScore(requestId == $requestId, 
						  typeId == $typeId, 
						  $typeScore : score)
		LocationScoreByPopularity(requestId == $requestId, 
								  locationId == $locationId, 
								  $scoreByPopularity : score)
		LocationScoreByPreviousExperience(requestId == $requestId, 
										  locationId == $locationId, 
										  $scoreByPreviousExperience : score)
		TimeEstimation(locationId == $locationId, $avgTime : timeInMinutes)
		eval($scoreByPopularity + $scoreByPreviousExperience > 0)
		$current : Number() from accumulate(
												SelectedLocation($time : time), //and 
												//TimeEstimation(locationId == $id, $time : timeInMinutes), 
												//sum($time))
												sum($time))
		eval(($current.doubleValue() + $avgTime) <= $days*Constants.AVAILABLE_MINUTES_PER_DAY)
	then
		System.out.println("Location with name: " + $l.getName() + " and score " + $typeScore * ($scoreByPopularity + $scoreByPreviousExperience) * 100 + " has been added to the recommended locations list");
		System.out.println("days: " + $days);
		System.out.println("avg: " + $avgTime);
		System.out.println("minutes total: " + $days*Constants.AVAILABLE_MINUTES_PER_DAY);
		System.out.println("current used time: " + $current);
		recommendedLocations.put($l, $typeScore * ($scoreByPopularity + $scoreByPreviousExperience) * 100);
		insert(new SelectedLocation($locationId, $avgTime));
end